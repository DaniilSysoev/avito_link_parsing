import time
import random
from avito_parsing import AvitoParser
from tg_alert import TelegramAlert
from dotenv import load_dotenv
import os
import json

load_dotenv()

# –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
SEARCH_URLS = [
    "https://www.avito.ru/sankt-peterburg/telefony/mobilnye_telefony/vivo/x200_pro_mini-ASgBAgICA0SywA34gZEVtMANzqk5sMENiPw3?context=H4sIAAAAAAAA_wFfAKD_YToyOntzOjg6ImZyb21QYWdlIjtzOjc6InN1Z2dlc3QiO3M6NToieF9zZ3QiO3M6NDA6IjkzYmIzZGE5OGI5NWViOGY2YjczOTlhZmVlNDc1YTg0YmE1NzUyYTEiO30IkA1gXwAAAA&f=ASgBAgECA0SywA34gZEVtMANzqk5sMENiPw3AUXGmgwVeyJmcm9tIjowLCJ0byI6NDYwMDB9&geoCoords=59.939095%2C30.315868&moreExpensive=0&presentationType=serp&s=104",
    "https://www.avito.ru/sankt-peterburg?cd=1&f=ASgCAgECAUXGmgwZeyJmcm9tIjoxOTAwMCwidG8iOjI2MDAwfQ&q=ray+ban+meta"
]

def main():
    if not os.path.exists('parsed_data.json'):
        with open('parsed_data.json', 'w', encoding='utf-8') as f:
            json.dump([], f)

    alert = TelegramAlert()
    parsers = [AvitoParser(url) for url in SEARCH_URLS]
    try:
        while True:
            for parser in parsers:
                try:
                    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: {parser.url}")
                    
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    items = parser.parse_page()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if not items:
                        print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä—É –≥–æ—Ä–æ–¥–∞")
                        alert.send_no_results_alert(parser.url)
                        continue
                        
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(items)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    new_items = [item for item in items if item.url not in parser.seen_items]
                    
                    if not new_items:
                        print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                        continue
                        
                    print(f"‚ú® –ù–∞–π–¥–µ–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    for i, item in enumerate(new_items, 1):
                        try:
                            print(f"  {i}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {item.title[:50]}... (–¶–µ–Ω–∞: {item.price})")
                            alert.send_alert(item)
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {str(e)[:100]}...")
                
                except Exception as e:
                    print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {parser.url}: {str(e)[:200]}...")
                    continue
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            sleep_time = random.randint(60, 600)
            mins = sleep_time // 60
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {mins} –º–∏–Ω—É—Ç ({sleep_time} —Å–µ–∫—É–Ω–¥)")
            time.sleep(sleep_time)
    
    except KeyboardInterrupt:
        print("\nüõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        print("\nüßπ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        for parser in parsers:
            try:
                parser.close()
                print(f"–ó–∞–∫—Ä—ã—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è {parser.url}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        print("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()